---
name: "Commit"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  python_version: "{{ cookiecutter.python_version }}"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
      - name: Run the goat
        uses: seisollc/goat@main
        with:
          disable_mypy: true
  test:
    name: Test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ "{{ env.python_version }}" }}
      - uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ "{{ runner.os }}" }}-python-${{ "{{ env.python_version }}" }}-pipenv-${{ "{{ hashFiles('Pipfile.lock') }}" }}
          restore-keys: |
            ${{ "{{ runner.os }}" }}-python-${{ "{{ env.python_version }}" }}-pipenv-
            ${{ "{{ runner.os }}" }}-python-
      - name: Install the dependencies
        run: |
          python -m pip install --upgrade pipenv
          pipenv install --python ${{ "{{ env.python_version }}" }} --deploy --ignore-pipfile --dev
      - name: Install Task
        uses: arduino/setup-task@v1
      - name: Build the image(s)
        run: task build
      - name: Run the tests
        run: task test
{%- if cookiecutter.versioning == "CalVer" %}
  bump-version:
    name: Bump version
    needs: [lint, test]
    if: "${{ "{{ github.event_name == 'push' && !startsWith(github.event.head_commit.message, 'Bump version: 2') }}" }}"
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      tag: ${{ "{{ steps.bump-version.outputs.tag }}" }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          token: ${{ "{{ secrets.PERSONAL_ACCESS_TOKEN }}" }}
          fetch-depth: 0
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ "{{ env.python_version }}" }}
      - uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ "{{ runner.os }}" }}-python-${{ "{{ env.python_version }}" }}-pipenv-${{ "{{ hashFiles('Pipfile.lock') }}" }}
          restore-keys: |
            ${{ "{{ runner.os }}" }}-python-${{ "{{ env.python_version }}" }}-pipenv-
            ${{ "{{ runner.os }}" }}-python-
      - name: Install the dependencies
        run: |
          python -m pip install --upgrade pipenv
          pipenv install --python ${{ "{{ env.python_version }}" }} --deploy --ignore-pipfile --dev
      - name: Bump the version
        id: bump-version
        run: |
          git config --global user.name 'Seiso Automation'
          git config --global user.email 'automation@seisollc.com'
          task release
          TAG="$(git describe --tags)"
          BRANCH="$(git branch --show-current)"
          git push --atomic origin "${BRANCH}" "${TAG}"
          echo "tag=${TAG}" >> "${GITHUB_OUTPUT}"
      - name: Publish the release to GitHub
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ "{{ secrets.GITHUB_TOKEN }}" }}
        with:
          name: ${{ "{{ steps.bump-version.outputs.tag }}" }}
          tag_name: ${{ "{{ steps.bump-version.outputs.tag }}" }}
          draft: false
          prerelease: false
{%- endif -%}
{%- if cookiecutter.dockerhub == 'yes' %}
  distribute:
    name: Distribute
    runs-on: ubuntu-20.04
    needs: [bump-version]
    if: ${{ "{{ github.event_name == 'push' }}" }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          ref: ${{ "{{ needs.bump-version.outputs.tag }}" }}
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ "{{ env.python_version }}" }}
      - uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ "{{ runner.os }}" }}-python-${{ "{{ env.python_version }}" }}-pipenv-${{ "{{ hashFiles('Pipfile.lock') }}" }}
          restore-keys: |
            ${{ "{{ runner.os }}" }}-python-${{ "{{ env.python_version }}" }}-pipenv-
            ${{ "{{ runner.os }}" }}-python-
      - name: Install the dependencies
        run: |
          python -m pip install --upgrade pipenv
          pipenv install --deploy --ignore-pipfile --dev
      - name: Install Task
        uses: arduino/setup-task@v1
      - name: Build the image(s)
        run: task build
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ "{{ secrets.DOCKERHUB_USERNAME }}" }}
          password: ${{ "{{ secrets.DOCKERHUB_TOKEN }}" }}
      - name: Publish the latest image to Docker Hub
        run: task publish
{%- endif -%}
